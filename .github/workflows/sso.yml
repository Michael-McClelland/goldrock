name: 'sso'

on:
  workflow_run:
    workflows: ["organization"]
    types:
      - completed

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  ORGANIZATION_IDENTIFIER: ${{ vars.ORGANIZATION_IDENTIFIER }}
  WORKING_DIRECTORY: ./sso/
  region: ${{ vars.HOME_REGION }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  setup:
    name: 'sso'
    runs-on: codebuild-goldrock-${{ github.run_id }}-${{ github.run_attempt }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/goldrock-github-actions
          aws-region: ${{ vars.HOME_REGION }}
          mask-aws-account-id: false
          role-duration-seconds: 43200

      - name: Check SSO Status
        id: check-sso-status
        run: |
          if [ ! -z "$(aws sso-admin list-instances --region us-east-2 --output text )" ];
          then 
            echo SSO_EXISTS=true >> "$GITHUB_ENV"
          else
            echo SSO_EXISTS=false >> "$GITHUB_ENV"
          fi

      - name: Puppeteer Requirements
        id: Puppeteer-Requirements
        if: ${{ env.SSO_EXISTS == 'false' }}
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          sudo apt-get update
          sudo apt-get install -y libgbm1

      - name: Install Node.js
        if: ${{ env.SSO_EXISTS == 'false' }}
        uses: actions/setup-node@v4
        with:
            node-version: 'latest'

      - name: Puppeteer Requirements NODE
        id: Puppeteer-Requirements-NODE
        if: ${{ env.SSO_EXISTS == 'false' }}
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          npm install npm --prefix ./ install

      - name: Puppeteer Enable SSO
        id: Puppeteer-Enable-SSO
        if: ${{ env.SSO_EXISTS == 'false' }}
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          node enable-sso.js
          sleep 90

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.ORGANIZATION_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
            -backend-config="use_lockfile=true" \
            -backend-config="kms_key_id=arn:aws:kms:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.ORGANIZATION_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}/${{env.region}}/$GITHUB_WORKFLOW" \
            -backend-config="region=${{env.region}}" \
            -backend-config="encrypt=true" \
            -backend-config="max_retries=20"

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_region: ${{env.region}}
          TF_VAR_ref: ${{github.ref_name}}
          TF_VAR_ORGANIZATION_IDENTIFIER: ${{env.ORGANIZATION_IDENTIFIER}}

      - name: Terraform apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run'
        run: terraform apply plan