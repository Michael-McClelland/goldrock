name: 'organization'

on:
  workflow_run:
    workflows: ["state"]
    types:
      - completed

env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  ORGANIZATION_IDENTIFIER: ${{ vars.ORGANIZATION_IDENTIFIER }}
  WORKING_DIRECTORY: ./organization/
  WORKING_DIRECTORY_ADDITIONAL_REGIONS: ./organization/additional_regions/
  region: ${{ vars.HOME_REGION }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  deploy_home_region:
    name: 'deploy_home_region'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      security_account_id: ${{steps.get_security_account.outputs.security_account_id}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/goldrock-github-actions
          aws-region: ${{ vars.HOME_REGION }}
          mask-aws-account-id: false
          role-duration-seconds: 43200

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.ORGANIZATION_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
            -backend-config="use_lockfile=true" \
            -backend-config="kms_key_id=arn:aws:kms:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.ORGANIZATION_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}/${{env.region}}/$GITHUB_WORKFLOW" \
            -backend-config="region=${{env.region}}" \
            -backend-config="encrypt=true" \
            -backend-config="max_retries=20"

      - name: orgaization import check
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          if [ ! "$(terraform state list | grep -i "^aws_organizations_organization.organization$" | wc -l | tr -d " ")" -eq 0 ];
            then
              echo 'state exists'
              echo ORGANIZATION_EXISTS=true >> "$GITHUB_ENV"
            else
              echo 'state not found'
              terraform import aws_organizations_organization.organization $(aws organizations describe-organization | jq -r '.Organization.Id')
          fi

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_management_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_account_id: ${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}
          TF_VAR_region: ${{env.region}}
          TF_VAR_ref: ${{github.ref_name}}
          TF_VAR_ORGANIZATION_IDENTIFIER: ${{env.ORGANIZATION_IDENTIFIER}}

      - name: Terraform apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform apply plan

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade boto3
          
      - name: StackSet Waiter
        working-directory: "./python/"
        run: |
          python cloudformationstacksetwaiter.py

      - name: Identify Security Account
        id: get_security_account
        run: |
          GUARDDUTY_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal guardduty.amazonaws.com | jq -r '.DelegatedAdministrators[0].Id')
          SECURITYHUB_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal securityhub.amazonaws.com | jq -r '.DelegatedAdministrators[0].Id')
          [ "$GUARDDUTY_ACCOUNT_ID" = "$SECURITYHUB_ACCOUNT_ID" ] && echo "security_account_id="$(aws guardduty list-organization-admin-accounts | jq -r '.AdminAccounts[0].AdminAccountId') >> "$GITHUB_OUTPUT" || exit r-66y

  parse_additional_regions:
    if: ${{  vars.ADDITIONAL_REGIONS != '' }}
    name: 'parse_additional_regions'
    runs-on: ubuntu-latest
    needs: deploy_home_region
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      regions: ${{steps.list_regions.outputs.regions}}
    steps:
      - name: list regions
        id: list_regions
        run: |
          echo "regions="$(echo "${{ vars.ADDITIONAL_REGIONS }}" | jq -cR 'split(" ")') >> "$GITHUB_OUTPUT"
          echo "${{ vars.ADDITIONAL_REGIONS }}" | jq -cR 'split(" ")' 

  additional_regions:
    if: ${{  vars.ADDITIONAL_REGIONS != '' }}
    name: 'additional_regions'
    runs-on: ubuntu-latest
    needs: [ deploy_home_region, parse_additional_regions ]
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        account_id:
          - ${{ vars.MANAGEMENT_ACCOUNT_ID }}
        region: ${{fromJson(needs.parse_additional_regions.outputs.regions)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{matrix.account_id}}:role/goldrock-github-actions
          aws-region: ${{ matrix.region }}
          mask-aws-account-id: false

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.ORGANIZATION_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{matrix.region}}" \
            -backend-config="use_lockfile=true" \
            -backend-config="kms_key_id=arn:aws:kms:${{matrix.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.ORGANIZATION_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}/${{matrix.region}}/$GITHUB_WORKFLOW" \
            -backend-config="region=${{matrix.region}}" \
            -backend-config="encrypt=true" \
            -backend-config="max_retries=20"
      
      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: terraform plan -out plan
        env:
          TF_VAR_security_account_id: ${{needs.deploy_home_region.outputs.security_account_id}}

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: terraform apply plan




  