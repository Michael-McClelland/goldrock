name: 'security-services'

on:
  workflow_run:
    workflows: ["organization"]
    types:
      - completed
env:
  ORGANIZATION_MANAGEMENT_ACCOUNT_ID: ${{ vars.MANAGEMENT_ACCOUNT_ID }}
  ORGANIZATION_IDENTIFIER: ${{ vars.ORGANIZATION_IDENTIFIER }}
  WORKING_DIRECTORY: ./regional/security-services/home_region/
  WORKING_DIRECTORY_ADDITIONAL_REGIONS: ./regional/security-services/additional_regions/
  region: ${{ vars.HOME_REGION }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  setup:
    name: 'setup'
    runs-on: codebuild-goldrock-${{ github.run_id }}-${{ github.run_attempt }}

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      security_account_id: ${{steps.get_security_account.outputs.security_account_id}}
      securityhub_full_deploy: ${{steps.get_security_account.outputs.securityhub_full_deploy}}

    steps:
      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:role/goldrock-github-actions
          aws-region: ${{ vars.HOME_REGION }}
          mask-aws-account-id: false

      - name: Identify Security Account
        id: get_security_account
        run: |
          GUARDDUTY_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal guardduty.amazonaws.com | jq -r '.DelegatedAdministrators[0].Id')
          SECURITYHUB_ACCOUNT_ID=$(aws organizations list-delegated-administrators --service-principal securityhub.amazonaws.com | jq -r '.DelegatedAdministrators[0].Id')
          [ "$GUARDDUTY_ACCOUNT_ID" = "$SECURITYHUB_ACCOUNT_ID" ] && echo "security_account_id="$(aws guardduty list-organization-admin-accounts | jq -r '.AdminAccounts[0].AdminAccountId') >> "$GITHUB_OUTPUT" || exit r-66y
          CURRENT_ACCOUNT=$(aws sts get-caller-identity --query Account --output text)
          CREATED_DATE=$(aws organizations describe-account --account-id $CURRENT_ACCOUNT --query Account.JoinedTimestamp --output text)
          CREATED_DATE_EPOCH=$(date -d"$CREATED_DATE" +%s)
          READY_DATE=$(( $CREATED_DATE_EPOCH + 345600 ))
          if [[ $READY_DATE -le $EPOCHSECONDS ]]; 
          then 
            echo "securityhub_full_deploy=true" >> "$GITHUB_OUTPUT"
          else 
            echo "securityhub_full_deploy=false" >> "$GITHUB_OUTPUT"
          fi

  deploy_home_region:
    name: 'deploy_home_region'
    runs-on: codebuild-goldrock-${{ github.run_id }}-${{ github.run_attempt }}

    needs: setup

    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      home_region_cmk_arn: ${{steps.terraform_apply.outputs.home_region_cmk_arn}}

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{needs.setup.outputs.security_account_id}}:role/goldrock-github-actions
          aws-region: ${{ vars.HOME_REGION }}
          mask-aws-account-id: false

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.ORGANIZATION_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{env.region}}" \
            -backend-config="use_lockfile=true" \
            -backend-config="kms_key_id=arn:aws:kms:${{env.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.ORGANIZATION_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{needs.setup.outputs.security_account_id}}/${{env.region}}/$GITHUB_WORKFLOW" \
            -backend-config="region=${{env.region}}" \
            -backend-config="encrypt=true" \
            -backend-config="max_retries=20"

      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: terraform plan -out plan
        env:
          TF_VAR_securityhub_full_deploy: ${{needs.setup.outputs.securityhub_full_deploy}}

      - name: Terraform apply
        id: terraform_apply
        working-directory: ${{env.WORKING_DIRECTORY}}
        if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_run'
        run: |
          terraform apply plan
          echo "home_region_cmk_arn=$(terraform output -raw home_region_cmk_arn)" >> "$GITHUB_OUTPUT"

  parse_additional_regions:
    if: ${{  vars.ADDITIONAL_REGIONS != '' }}
    name: 'parse_additional_regions'
    runs-on: codebuild-goldrock-${{ github.run_id }}-${{ github.run_attempt }}
    needs: deploy_home_region
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    outputs:
      regions: ${{steps.list_regions.outputs.regions}}
    steps:
      - name: list regions
        id: list_regions
        run: |
          echo "regions="$(echo "${{ vars.ADDITIONAL_REGIONS }}" | jq -cR 'split(" ")') >> "$GITHUB_OUTPUT"
          echo "${{ vars.ADDITIONAL_REGIONS }}" | jq -cR 'split(" ")' 

  additional_regions:
    if: ${{  vars.ADDITIONAL_REGIONS != '' }}
    name: 'additional_regions'
    runs-on: codebuild-goldrock-${{ github.run_id }}-${{ github.run_attempt }}
    needs: [ setup, deploy_home_region, parse_additional_regions ]
    defaults:
      run:
        shell: bash

    permissions:
      contents: read
      id-token: write

    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        account_id:
          - ${{needs.setup.outputs.security_account_id}}
        region: ${{fromJson(needs.parse_additional_regions.outputs.regions)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{matrix.account_id}}:role/goldrock-github-actions
          aws-region: ${{ matrix.region }}
          mask-aws-account-id: false

      - name: Terraform init
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: |
          terraform init \
            -backend-config="bucket=${{env.ORGANIZATION_IDENTIFIER}}-tfstate-${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}-${{matrix.region}}" \
            -backend-config="use_lockfile=true" \
            -backend-config="kms_key_id=arn:aws:kms:${{matrix.region}}:${{env.ORGANIZATION_MANAGEMENT_ACCOUNT_ID}}:alias/${{env.ORGANIZATION_IDENTIFIER}}-tfstate" \
            -backend-config="key=${{needs.setup.outputs.security_account_id}}/${{matrix.region}}/$GITHUB_WORKFLOW" \
            -backend-config="region=${{matrix.region}}" \
            -backend-config="encrypt=true" \
            -backend-config="max_retries=20"
      
      - name: Terraform plan
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: terraform plan -out plan
        env:
          TF_VAR_home_region_cmk_arn: ${{needs.deploy_home_region.outputs.home_region_cmk_arn}}


      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        working-directory: ${{env.WORKING_DIRECTORY_ADDITIONAL_REGIONS}}
        run: terraform apply plan
        env:
          TF_VAR_home_region_cmk_arn: ${{needs.deploy_home_region.outputs.home_region_cmk_arn}}